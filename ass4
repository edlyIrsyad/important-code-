#define DEFAULTHEAPSIZE 1023

template <class T>
class Heap {
protected:
	T* _heap;
	int p(T i) { return (i / 2) - 1; }
	int l(T i) { return 2i + 1; }
	int r(T i) { return 2i + 2; }
	int _n;
	void _bubbleUp(int index);
	void _bubbleDown(int index);
    int _lookFor(T x); // return the index of the item x, return -1 if not found
                       // it is not a good/usual implementation, so we hide it from public
public:
	Heap() {
		_heap = new T[DEFAULTHEAPSIZE];
		_n = 0;
	};

	void insert(T);
    bool empty() {return _n==0;};
	T extractMax();
    T peekMax() {return _heap[0];};
	void printHeapArray();
	void printTree();
    void increaseKey(T from, T to);
    void decreaseKey(T from, T to);
    void deleteItem(T);
    void swap(T* a, T* b);
	~Heap() { delete[] _heap; };
	
	//You may include your own functions, if necessary
};


template <class T>
void Heap<T>::_bubbleUp(int index) {
	if (index == 0) { return; }
	if (_heap[index] > _heap[p(index)]) {
		swap(&_heap[index], &_heap[p(index)]);
	}
	_bubbleUp(p(index));
}

template <class T>
void Heap<T>::_bubbleDown(int index) {
	if (index + 1 > _n) { return; }
	int toSwap = index;
	if (_heap[toSwap] < _heap[l(index)]) {
		toSwap = l(index);
	}
	if (_heap[l(index)] < _heap[r(index)]) {
		toSwap = r(index);
	}
	if (toSwap != index) {
		swap(&_heap[index], &_heap[toSwap]);
		_bubbleDown(toSwap);
	}
}

template <class T>
void Heap<T>::insert(T item) {
	_heap[_n] = item;
	_n++;
	_bubbleUp(_n - 1);
	return;
}

template <class T>
T Heap<T>::extractMax() {
	T max = _heap[0];
	deleteItem(max);
	return T(max);
}


template <class T>
void Heap<T>::printHeapArray() {
	for (int i = 0; i < _n; i++)
		cout << _heap[i] << " ";
	cout << endl;
}

template <class T>
int Heap<T>::_lookFor(T x){ // not a very good implementation, but just use this for now.
    int i;
    for(i=0;i<_n;i++)
        if (_heap[i] == x)
            return i;
    
    return -1;
}

template <class T>
void Heap<T>::decreaseKey(T from, T to)
{
	_heap[_lookFor(from)] = to;
	_bubbleDown(_lookFor(to));
}


template <class T>
void Heap<T>::increaseKey(T from, T to)
{
	_heap[_lookFor(from)] = to;
	_bubbleUp(_lookFor(to));
}

template <class T>
void Heap<T>::deleteItem(T x)
{
	int toDelete = _lookFor(x);
	int lastItem = _n - 1;
	swap(&_heap(toDelete), &_heap(lastItem)); //swap item to be deleted with last item
	_n -= 1;
	if (_heap(toDelete) > _heap(p(toDelete))) {
		_bubbleUp(toDelete);
	}
	else {
		_bubbleDown(toDelete);
	}
}

template <class T>
void Heap<T>::printTree() {
    int parity = 0;
	if (_n == 0)
		return;
	int space = pow(2,1 + (int) log2f(_n)),i;
	int nLevel = (int) log2f(_n)+1;
	int index = 0,endIndex;
    int tempIndex;
	
	for (int l = 0; l < nLevel; l++)
	{
		index = 1;
        parity = 0;
		for (i = 0; i < l; i++)
			index *= 2;
		endIndex = index * 2 - 1;
		index--;
        tempIndex = index;
        while (index < _n && index < endIndex) {
            for (i = 0; i < space-1; i++)
                cout << " ";
            if(index==0)
                cout << "|";
            else if (parity)
                cout << "\\";
            else
                cout << "/";
            parity = !parity;
            for (i = 0; i < space; i++)
                cout << " ";
			index++;
		}
        cout << endl;
        index=tempIndex;
		while (index < _n && index < endIndex) {
			for (i = 0; i < (space-1-((int) log10(_heap[index]))); i++)
				cout << " ";
			cout << _heap[index];
			for (i = 0; i < space; i++)
				cout << " ";
			index++;
		}
		
		cout << endl;
		space /= 2;
	}

}

template <class T>
void Heap<T>::swap(T* a, T* b) {
	T temp = *a;
	*a = *b;
	*b = temp;
}
//If necessary, you may include your own functions
